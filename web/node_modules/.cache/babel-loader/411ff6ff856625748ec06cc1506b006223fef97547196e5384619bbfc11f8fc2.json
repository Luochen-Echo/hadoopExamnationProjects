{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { AcGameObject } from \"./AcGameObject\";\nimport { Snake } from \"./Snake\";\nimport { Walls } from \"./Walls\";\nexport class GameMap extends AcGameObject {\n  constructor(ctx, parent) {\n    super();\n    this.ctx = ctx;\n    this.parent = parent;\n    this.L = 0;\n    this.rows = 13;\n    this.cols = 14;\n    this.inner_walls_count = 20;\n    this.walls = [];\n    this.snakes = [new Snake({\n      id: 0,\n      color: \"rgb(75, 118, 236)\",\n      r: this.rows - 2,\n      c: 1\n    }, this), new Snake({\n      id: 1,\n      color: \"rgb(249, 71, 73)\",\n      r: 1,\n      c: 1\n    }, this)];\n  }\n  check_connectivity(g, sx, sy, tx, ty) {\n    if (sx == tx && sy == ty) return true;\n    g[sx][sy] = true;\n    let dx = [0, 1, 0, -1],\n      dy = [-1, 0, 1, 0];\n    for (let i = 0; i < 4; i++) {\n      let x = sx + dx[i],\n        y = sy + dy[i];\n      if (!g[x][y] && this.check_connectivity(g, x, y, tx, ty)) return true;\n    }\n    return false;\n  }\n  create_walls() {\n    const g = [];\n    for (let r = 0; r < this.rows; r++) {\n      g[r] = [];\n      for (let c = 0; c < this.cols; c++) {\n        g[r][c] = false;\n      }\n    }\n\n    //给四周生成墙\n    for (let r = 0; r < this.rows; r++) {\n      g[r][0] = g[r][this.cols - 1] = true;\n    }\n    for (let c = 0; c < this.cols; c++) {\n      g[0][c] = g[this.rows - 1][c] = true;\n    }\n\n    //创建随机障碍物\n    for (let i = 0; i < this.inner_walls_count / 2; i++) {\n      for (let j = 0; j < 1000; j++) {\n        let r = parseInt(Math.random() * this.rows);\n        let c = parseInt(Math.random() * this.cols);\n        if (g[r][c] || g[this.rows - 1 - r][this.cols - 1 - c]) continue;\n        if (r == this.rows - 2 && c == 1 || r == 1 && c == this.cols - 2) continue;\n        g[r][c] = g[this.rows - 1 - r][this.cols - 1 - c] = true;\n        break;\n      }\n    }\n    const copy_g = JSON.parse(JSON.stringify(g));\n    if (!this.check_connectivity(copy_g, this.rows - 2, 1, 1, this.cols - 2)) {\n      return false;\n    }\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.cols; c++) {\n        if (g[r][c]) {\n          this.walls.push(new Walls(r, c, this));\n        }\n      }\n    }\n    return true;\n  }\n  start() {\n    for (let i = 0; i < 1000; i++) {\n      if (this.create_walls()) break;\n    }\n  }\n  update_size() {\n    this.L = parseInt(Math.min(this.parent.clientWidth / this.cols, this.parent.clientHeight / this.rows));\n    this.ctx.canvas.width = this.L * this.cols;\n    this.ctx.canvas.height = this.L * this.rows;\n  }\n  update() {\n    this.update_size();\n    this.render();\n  }\n  render() {\n    const color_event = \"rgb(162, 208, 72)\",\n      color_odd = \"rgb(170, 215, 81)\";\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.cols; c++) {\n        this.ctx.fillStyle = (r + c) % 2 ? color_odd : color_event;\n        this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L);\n      }\n    }\n  }\n}","map":{"version":3,"names":["AcGameObject","Snake","Walls","GameMap","constructor","ctx","parent","L","rows","cols","inner_walls_count","walls","snakes","id","color","r","c","check_connectivity","g","sx","sy","tx","ty","dx","dy","i","x","y","create_walls","j","parseInt","Math","random","copy_g","JSON","parse","stringify","push","start","update_size","min","clientWidth","clientHeight","canvas","width","height","update","render","color_event","color_odd","fillStyle","fillRect"],"sources":["D:/JavaProjects/kob/web/src/assets/scripts/GameMap.js"],"sourcesContent":["import { AcGameObject } from \"./AcGameObject\";\r\nimport { Snake } from \"./Snake\";\r\nimport { Walls } from \"./Walls\";\r\n\r\nexport class GameMap extends AcGameObject {\r\n    constructor(ctx,parent) {\r\n        super();\r\n\r\n        this.ctx = ctx;\r\n        this.parent = parent;\r\n        this.L = 0;\r\n\r\n        this.rows = 13;\r\n        this.cols = 14;\r\n\r\n        this.inner_walls_count = 20;\r\n        this.walls = [];\r\n\r\n        this.snakes = [\r\n            new Snake({id: 0, color:\"rgb(75, 118, 236)\", r: this.rows - 2, c: 1}, this),\r\n            new Snake({id: 1, color:\"rgb(249, 71, 73)\", r: 1, c: 1}, this),\r\n\r\n        ]\r\n    }\r\n\r\n    check_connectivity(g, sx, sy, tx, ty) {\r\n        if (sx == tx && sy == ty) return true;\r\n        g[sx][sy] = true;\r\n\r\n        let dx = [0, 1, 0, -1], dy = [-1, 0, 1, 0];\r\n\r\n        for (let i = 0; i < 4; i ++) {\r\n            let x = sx + dx[i], y = sy + dy[i];\r\n            if (!g[x][y] && this.check_connectivity(g, x, y, tx, ty)) return true;\r\n        }\r\n\r\n         return false;\r\n\r\n    }\r\n\r\n    create_walls() {\r\n        const g = [];\r\n        for (let r = 0; r < this.rows; r ++) {\r\n            g[r] = [];\r\n            for (let c = 0; c < this.cols; c ++) {\r\n                g[r][c] = false;\r\n            }\r\n        }\r\n\r\n        //给四周生成墙\r\n        for (let r = 0; r < this.rows; r ++) {\r\n            g[r][0] = g[r][this.cols - 1] = true;\r\n        }\r\n\r\n\r\n        for (let c = 0; c < this.cols; c ++) {\r\n            g[0][c] = g[this.rows - 1][c] = true;\r\n        }\r\n\r\n\r\n        //创建随机障碍物\r\n        for (let i = 0; i < this.inner_walls_count / 2; i ++) {\r\n            for (let j = 0; j < 1000; j++) {\r\n                let r = parseInt(Math.random() * this.rows);\r\n                let c = parseInt(Math.random() * this.cols);\r\n\r\n                if (g[r][c] || g[this.rows - 1 - r][this.cols - 1 - c]) continue;\r\n\r\n                if (r == this.rows - 2 && c == 1 || r == 1 && c == this.cols - 2) continue;\r\n\r\n                g[r][c] = g[this.rows - 1 - r][this.cols - 1 - c] = true;\r\n                break;\r\n            }\r\n        }\r\n        const copy_g = JSON.parse(JSON.stringify(g));\r\n        if (!this.check_connectivity(copy_g, this.rows - 2, 1, 1, this.cols - 2)) {\r\n            return false;   \r\n        }\r\n\r\n        for (let r = 0; r < this.rows; r ++) {\r\n            for (let c = 0; c < this.cols; c ++) {\r\n                if (g[r][c]) {\r\n                    this.walls.push(new Walls(r, c, this));\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    start() { \r\n       for (let i = 0; i < 1000; i ++) {\r\n              if (this.create_walls()) break;\r\n       }\r\n    }\r\n    update_size() {\r\n        this.L = parseInt(Math.min(this.parent.clientWidth / this.cols, this.parent.clientHeight / this.rows));\r\n        this.ctx.canvas.width = this.L * this.cols;\r\n        this.ctx.canvas.height = this.L * this.rows;\r\n    }\r\n    update() { \r\n        this.update_size();\r\n        this.render();\r\n    }\r\n\r\n    render() {\r\n        const color_event = \"rgb(162, 208, 72)\", color_odd = \"rgb(170, 215, 81)\"\r\n        for (let r = 0; r < this.rows; r ++) {\r\n            for (let c = 0; c < this.cols; c ++) {\r\n                this.ctx.fillStyle = (r + c) % 2 ? color_odd : color_event;\r\n                this.ctx.fillRect(c * this.L, r * this.L, this.L, this.L);\r\n            }\r\n        }\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}